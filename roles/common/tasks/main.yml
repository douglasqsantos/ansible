---
# tasks file for common

## Packages for Ubuntu/Debian
- name: Update all packages to the latest version on Ubuntu/Debian
  apt:
    upgrade: dist
  when: ansible_distribution_file_variety == 'Debian'
  tags:
    - update_all_packages_on_debian_base
    - install_base_packages_on_debian_base
    - install_base_packages

- name: Install Base Packages on Ubuntu/Debian
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: present
  with_items: "{{ packages_deb }}"
  when: ansible_distribution_file_variety == 'Debian'
  tags:
    - install_base_packages_on_debian_base
    - install_base_packages

- name: Clean useless packages from the cache on Ubuntu/Debian
  apt:
    autoclean: yes
  when: ansible_distribution_file_variety == 'Debian'
  tags:
    - remove_cache_from_debian_base
    - install_base_packages

## Packages for CentOS
- name: Update all packages to the latest version on CentOS
  yum:
    name: '*'
    state: latest
  when: ansible_distribution == 'CentOS'
  tags:
    - update_all_packages_on_centos
    - install_base_packages_on_centos
    - install_base_packages

- name: Install Repositories Packages on CentOS
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: present
  with_items: "{{ packages_repo_rpm }}"
  when: ansible_distribution == 'CentOS'
  tags:
    - install_repositories_on_centos
    - install_base_packages_on_centos
    - install_base_packages

- name: Install Base Packages on CentOS
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: present
  with_items: "{{ packages_rpm }}"
  when: ansible_distribution == 'CentOS'
  tags:
    - install_base_packages_on_centos
    - install_base_packages

### MOTD
- name: Configure a MOTD (message of the day)
  copy:
    src: motd
    dest: /etc/motd
    owner: root
    group: root
    mode: '0644'
  notify: MOTD changed
  tags:
    - motd

- name: Register unwanted motd files
  stat:
    path: "{{motd_path}}/{{item}}"
  register: filecheck
  with_items: "{{ unwanted_motd_files | default([]) }}"
  when:
    - ansible_distribution == "Ubuntu"
  tags:
    - motd

- name: Check if unwanted motd files are executable and remove the executable bit
  file:
    path: "{{motd_path}}/{{item.item}}"
    state: touch
    mode: '0644'
  with_items: "{{ filecheck.results }}"
  when:
    - ansible_distribution == "Ubuntu"
    - item.stat.exists == true and item.stat.executable == True
  tags:
    - motd

## BASHRC
- name: Configure the .bashrc for root
  copy:
    src: bashrc
    dest: /root/.bashrc
    owner: root
    group: root
    mode: '0644'
  notify: Root bashrc changed
  tags:
    - bashrc
    - bashrc_root

- name: Configure the .bashrc for common user
  copy:
    src: bashrc
    dest: "/home/{{ item }}/.bashrc"
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: '0644'
  with_items:
    - "{{ common_users }}"
  notify: Common bashrc changed
  tags:
    - bashrc
    - bashrc_common

## VIMRC
- name: Configure the .vimrc for root
  copy:
    src: vimrc
    dest: /root/.vimrc
    owner: root
    group: root
    mode: '0644'
  notify: Root vimrc changed
  tags:
    - vimrc
    - vimrc_root

- name: Creating the vim colors directory
  file:
    path: "/root/{{ vim_colors }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags:
    - vimrc
    - vimrc_root

- name: Configure the .vim for root
  copy:
    src: "{{ item }}"
    dest: "/root/{{ vim_colors }}/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  with_items:
    - "{{ vim_files }}"
  notify: Root .vim changed
  tags:
    - vimrc
    - vimrc_root

- name: Creating the vim colors directory
  file:
    path: "/home/{{ item }}/{{ vim_colors }}"
    state: directory
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: '0755'
  with_items:
    - "{{ common_users }}"
  tags:
    - vimrc
    - vimrc_common

- name: Configure the .vimrc for common user
  copy:
    src: vimrc
    dest: "/home/{{ item }}/.vimrc"
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: '0644'
  with_items:
    - "{{ common_users }}"
  notify: Common vimrc changed
  tags:
    - vimrc
    - vimrc_common

- name: Configure the .vim for common user
  copy:
    src: "{{ item.1 }}"
    dest: "/home/{{ item.0 }}/{{ vim_colors }}/{{ item.1 }}"
    owner: "{{ item.0 }}"
    group: "{{ item.0 }}"
    mode: '0644'
  with_nested:
    - "{{ common_users }}"
    - "{{ vim_files }}"
  notify: Common vimrc changed
  tags:
    - vimrc
    - vimrc_common

## SSH PubKeys
- name: Set up Authorized Keys
  authorized_key:
    user: "{{ item.0 }}"
    state: present
    key: "{{ lookup('file', item.1) }}"
  with_nested:
    - "{{ common_users }}"
    - "{{ common_keys }}"
  notify: Authorized Keys
  tags:
    - ssh_pubkeys

## IPV6
- name: Disable IPV6 for all interfaces
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  when: disable_ipv6 == 'yes'
  tags:
    - disable_ipv6

- name: Disable IPV6 by default
  sysctl:
    name: net.ipv6.conf.default.disable_ipv6
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  when: disable_ipv6 == 'yes'
  tags:
    - disable_ipv6

- name: Disable IPV6 for loopback
  sysctl:
    name: net.ipv6.conf.lo.disable_ipv6
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  when: disable_ipv6 == 'yes'
  tags:
    - disable_ipv6

## Timezone
- name: "Set timezone to {{ timezone }}"
  timezone:
    name: "{{ timezone }}"
  tags:
    - set_timezone

## Get the Disk for Logs LVM
- name: Getting the Log Disk do use in LVM
  fdisk:
    bytes: "{{ log_disk_bytes }}"
  register: log_disk_to_use
  when:
    - (log_disk_bytes is defined) and (log_disk_bytes >0)
  tags:
    - lvm_disks
    - check_lvm_logs_disk

## Create the VG
- name: Create VG [{{logs_vg_name}}] for Log Disk
  lvg:
    vg: "{{ logs_vg_name }}"
    pvs: "{{ log_disk_to_use.stdout }}"
  when:
    - (log_disk_to_use.stdout is defined) and (log_disk_to_use.stdout | length == 8)
  tags:
    - lvm_disks
    - check_lvm_logs_disk

## Create the LVM
- name: Create LVM [{{logs_lv_name}}] for Log Disk with size [{{logs_lv_size}}]
  lvol:
    vg: "{{ logs_vg_name }}"
    lv: "{{ logs_lv_name }}"
    size: "{{ logs_lv_size }}"
    shrink: no
  when:
    - (log_disk_to_use.stdout is defined) and (log_disk_to_use.stdout | length == 8)
  tags:
    - lvm_disks
    - check_lvm_logs_disk

## Creating the FS
- name: Create a [{{ logs_fs_type }}] filesystem on ["/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"]
  filesystem:
    fstype: "{{ logs_fs_type }}"
    dev: "/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"
    force: "{{ logs_fs_force }}"
  tags:
    - lvm_disks
    - check_lvm_logs_disk

## Checking Device to be mounted
- name: Check if the device ["/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"] exist
  stat:
    path: "/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"
  register: logs_lvm_disk
  tags:
    - lvm_disks
    - check_lvm_logs_disk
    - mount_lvm_logs_disk

## Need to be sure that the partition is or not synced...
- name: Check if the device ["{{ logs_sync_flag }}"] exist
  stat:
    path: "{{ logs_sync_flag }}"
  register: logs_sync_flag_stat
  tags:
    - lvm_disks
    - check_lvm_logs_disk
    - mount_lvm_logs_disk

## Mount the Logs Disk
- name: Mount up ["/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"] on "{{ tmp_logs_mount_point }}"
  mount:
    path: "{{ tmp_logs_mount_point }}"
    src: "/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"
    fstype: "{{ logs_fs_type }}"
    opts: defaults,noatime
    state: mounted
  when:
    - logs_mount == 'yes'
    - logs_lvm_disk.stat.exists == True
    - logs_sync_flag_stat.stat.exists == False
  tags:
    - lvm_disks
    - check_lvm_logs_disk
    - mount_lvm_logs_disk
  notify: Stop Rsyslog

## Synchronization of logs
- name: Synchronization from ["{{ logs_mount_point }}"] to "{{ tmp_logs_mount_point }}"
  synchronize:
    src: "{{ logs_mount_point }}/"
    dest: "{{ tmp_logs_mount_point }}/"
    archive: yes
    links: yes
  delegate_to: "{{ inventory_hostname }}"
  when:
    - logs_mount == 'yes'
    - logs_lvm_disk.stat.exists == True
    - logs_sync_flag_stat.stat.exists == False
  tags:
    - lvm_disks
    - check_lvm_logs_disk
    - mount_lvm_logs_disk
  notify: Create Flag Synced

## Mount the Data Disk
- name: Umount up ["/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"] on "{{ tmp_logs_mount_point }}"
  mount:
    path: "{{ tmp_logs_mount_point }}"
    state: absent
  when:
    - logs_mount == 'yes'
    - logs_lvm_disk.stat.exists == True
  tags:
    - lvm_disks
    - check_lvm_logs_disk
    - mount_lvm_logs_disk

## Mount the Logs Disk
- name: Mount up ["/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"] on "{{ logs_mount_point }}"
  mount:
    path: "{{ logs_mount_point }}"
    src: "/dev/mapper/{{ logs_vg_name }}-{{ logs_lv_name }}"
    fstype: "{{ logs_fs_type }}"
    opts: defaults,noatime
    state: mounted
  when:
    - logs_mount == 'yes'
    - logs_lvm_disk.stat.exists == True
  tags:
    - lvm_disks
    - check_lvm_logs_disk
    - mount_lvm_logs_disk
  notify: Start Rsyslog

## Get the Disk for Data LVM
- name: Getting the Data Disk do use in LVM
  fdisk:
    bytes: "{{ data_disk_bytes }}"
  register: data_disk_to_use
  when:
    - (data_disk_bytes is defined) and (data_disk_bytes >0)
  tags:
    - lvm_disks
    - check_lvm_data_disk

## Create the VG
- name: Create VG [{{data_vg_name}}] for Data Disk
  lvg:
    vg: "{{ data_vg_name }}"
    pvs: "{{ data_disk_to_use.stdout }}"
  when:
    - (data_disk_to_use.stdout is defined) and (data_disk_to_use.stdout | length == 8)
  tags:
    - lvm_disks
    - check_lvm_data_disk

## Create the LVM
- name: Create LVM [{{data_lv_name}}] for Data Disk with size [{{data_lv_size}}]
  lvol:
    vg: "{{ data_vg_name }}"
    lv: "{{ data_lv_name }}"
    size: "{{ data_lv_size }}"
    shrink: no
  when:
    - (data_disk_to_use.stdout is defined) and (data_disk_to_use.stdout | length == 8)
  tags:
    - lvm_disks
    - check_lvm_data_disk

## Creating the FS
- name: Create a [{{ data_fs_type }}] filesystem on ["/dev/mapper/{{data_vg_name}}-{{ data_lv_name }}"]
  filesystem:
    fstype: "{{ data_fs_type }}"
    dev: "/dev/mapper/{{ data_vg_name }}-{{ data_lv_name }}"
    force: "{{ data_fs_force }}"
  tags:
    - lvm_disks
    - check_lvm_data_disk

## Checking Device to be mounted
- name: Check if the device ["/dev/mapper/{{data_vg_name}}-{{ data_lv_name }}"] exist
  stat:
    path: "/dev/mapper/{{data_vg_name}}-{{ data_lv_name }}"
  register: data_lvm_disk
  tags:
    - lvm_disks
    - check_lvm_data_disk
    - mount_lvm_data_disk

## Mount the Data Disk
- name: Mount up ["/dev/mapper/{{data_vg_name}}-{{ data_lv_name }}"] on "{{ data_mount_point }}"
  mount:
    path: "{{ data_mount_point  }}"
    src: "/dev/mapper/{{data_vg_name}}-{{ data_lv_name }}"
    fstype: "{{ data_fs_type }}"
    opts: defaults,noatime
    state: mounted
  when:
    - data_mount == 'yes'
    - data_lvm_disk.stat.exists == True
  tags:
    - lvm_disks
    - check_lvm_data_disk
    - mount_lvm_data_disk
...